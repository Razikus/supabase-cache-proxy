version: '3.8'

services:
  traefik:
    image: traefik:v2.10
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.email=${TRAEFIK_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "letsencrypt:/letsencrypt"
    networks:
      - web

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - web

  postgrest-cache:
    build: .
    deploy:
      replicas: ${APP_REPLICAS}
    environment:
      - SUPA_URL=${SUPA_URL}
      - REDIS_ADDR=${REDIS_ADDR}
      - CACHE_TTL_MINUTES=${CACHE_TTL_MINUTES}
      - CACHE_TABLES=${CACHE_TABLES}
    networks:
      - web
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.postgrest.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.postgrest.entrypoints=websecure"
      - "traefik.http.routers.postgrest.tls.certresolver=letsencrypt"
      - "traefik.http.services.postgrest.loadbalancer.server.port=8080"
    depends_on:
      - redis
      - traefik

networks:
  web:

volumes:
  letsencrypt:
  redis_data: